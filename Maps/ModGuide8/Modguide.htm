Map making guide for Homeworld<br>
21-07-2003<p>

By: Jacob Christian Munch-Andersen, alias Guardian-FWA<br>
Email: <a href="mailto:bl34@private.dk">bl34@private.dk</a><p>

The easiest way to crate a new map is to copy another map and edit it. Create a new directory in the MultiPlayer directory, the name of the folder does not need to be the same as the mapname, however, it will need to end by the number of players that shall play in it. If you want a map to be playable by multiple numbers of players you will need to create more folders e.g. Stardust2, Stardust3 and Stardust4. Now copy following files from the modguide directory to your new directory: Asteroids.dist, DustClouds.dist, Nebula.dist, Standard_level_file.level, Standard_player_file0.missphere, Standard_player_file1.missphere, Standard_resource_file.missphere and Description.txt. Now rename the .level file to the name of your folder e.g. Stardust2.level. If it is only a 2 player map, it will now be playable. Start Homeworld and find the map named "Insert map name", and see that it works.<p>

In order to edit one of the map files, rightclick on it and choose open, now you will probably see a box saying "Windows can not open the file:", you can now choose to choose a suitable program from the list, do so, and choose a plain text editor, like Notepad or Wordpad. It will be a good idea to tick a box making that kind of files always be opened using the choosen program. Please open the .level file. The first line says: "; MissionMan" If it doesn't, the map will not work. The second written line says: "[Insert map name]", do so, it is common to end the mapname with the number(s) of players the map support ( (2), (2-4), (2, 4), (6-8), (2-8) ).<p>

The next thing that the file contain is three MissionSphere flags, they all point to an external file. The first value tells what player owns the ships in the appointed file, note that players are numbered 0-7, -1 means that the ships/resources do not belong to anybody, such ships will be hostile, and attack anything within visual range. The third value must be either "ResourceSphere" or "Mothership", if it is Mothership, the second value must be either R1 or R2 (it makes no difference), and the appointed file must contain ships. If the third value is ResourceSphere, the appointed file must contain resources. The five following values are obsolete. The last value is the name of the appointed file, a matching file must be in the same directory. If the map is for more than two players, please create additional flags.<p>

For the Background flag, the first value must be "ez" followed by a number from 01 to 17, the two following numbers are for backgrund rotation, these should be 200 and 0, in order to make the lighting fit the background, the Lighting flag should have the same value as the first value in the Background flag, in order to make light and background fit together. The smZoomMin and Max flags determine how far and close it is possible to zoom in the sensors manager, smInitialDistance is how far the player will be zoomed out when first entering the sensors manager.<p><img src="Universe.gif"><p>

The smUniverseSizeX, Y and Z flags will set the size of the map, in meters. The number that you enter is the radius, so if you set smUniverseSizeZ to 100000, the available Z-co-ordinates will span from -100000 to 100000. The map will always take form as a cylinder (if the X and Y numbers are different from each other, the cylinder will be squeezed). Positive directions have been marked.<p>

The Exclude and Include flags determines if an object will be loaded or not, if you install, and open MissionMan, and create a new map there, you can open an object in the tree, and find a list of shipnames. R1 is Kushan, R2 Taiidan, P1 Turanic Raiders, P2 Kadesh, P3 Bentusi, Traders the rest. It is a good idea to exclude unused ships and derelicts as they will othervise take up memory. You can make ships unbuildable by excluding them, remember to exclude both the Kushan and the Taiidan version of a ship.<p>

SongNumber determines what music/noises will be played in the map, the value must be from 0 and up, in order to have music.<p>

Now open Standard_player_file0.missphere, this is one of the files that the .level file pointed too, it contains all information about player 0's starting fleet. The first three values in a Ships flag is the location, X, Y and Z co-ordinates, in metres, the middle of the map is always 0, 0, 0. The fourth value is the ships rotation in degrees (360 for a full round), note that ships will rotate counter-clockwise. The fifth and sixth value is the shiptype, it doesn't matter if you choose Kushan or Taiidan ships, these will always be what the player have choosen. Remember to include them in the .level file if you want to add non-standard ships. Some ships do not have the same name as in the game, look into MissionMan for the correct names. Seventh value is the number of ships, of that type. Eighth value is the formation, PARADE_FORMATION will make the ships start in parade formation, this will render the location obsolete as they will always start next to the mothership. NULL_FORMATION will not assign any formation, be aware that X-formation is DELTA3D_FORMATION. All other formations follow the name_FORMATION system. Instead of assigning a formation you can also write: "UseAsMothership", now this/these ships must be destroyed before the player will die. Remember to add new player files if needed.<p>

Open Standard_resource_file.missphere. The Resources flag have the following attributes: Resource type, position (X, Y, Z), shape, Sphere will make a cube, and Cylinder will make a box. The following attribute point to a file containing information about size of the rocks and dustclouds. The number of resources in the cube/box is the following information, next comes radius. If you have typed Sphere in the shape attribute, the following three values will not be used. For a "Cylinder" these three values are: lenght, vertical rotation and horizontal rotation. Up to two extra numbers can be added like this:<p>

<font face="courier">Resources    Asteroid,0,0,0,Sphere,Asteroids.dist,100,1000,0,0,0,2048,10<br>Resources    Asteroid,0,0,0,Sphere,Asteroids.dist,100,1000,0,0,0,511</font><p>

If the first of these two numbers is 511, and the shape have been set to Sphere, the resources will actually form a sphere, instead of the ugly cube. If the number is 512, and the resource type is Asteroid, the rocks will move towards the middle of the map, these rocks are unharvestable, and very deadly. The number 2048 makes the resources regenerate, here you can use the second number, the higher, the more time it will take before a resource regenerate. None of these special attributes can be given to nebula. Nebula must bear the shape: "Nebula", after the amount comes the sizes of the nebula box (X, Y, Z), and an unused number.<p>

Any derelicts (rubbish) that you want in your map must be added in the resource file, the first value in the derelict flag is the name of the derelict, then comes the position (X, Y, Z), two values for rotation, and one that can at least be uset to make the derelict marked in the resource manager (type 1000).<p>

Open Asteroids.dist, this file contains the sharing between small and large rocks. Asteroid0 is unharvestable dust, and Asteroid4 is the biggest rocks, the first row is the sharing when the game begins, and the second row is the sharing for rocks when regenerating. Any asteroid box using this file for sharing will have three times more of Asteroid3s than of Asteroid4s, if it regenerates, no Asteroid4s will be generated. If the last row is missing, the first will also be used for regeneration. You can have multiple .dist files for each kind of resource.<p>

Open Description.txt, The Description flags contains the information about the map that will be showed in the game, each Description flag will start a new line, in order to make a bright letter type &amp; in front of it. Remember to check that the text will fit into the textbox in the game. The Color flag contain 3 values, red, green and blue, each can be up to 255, this is the color that will be used for the description.<p>

The type.flag flags are used for setting the maps default settings. The type.flagNeeded BIT# flag tells that setting number # should be ajusted, if type.flag BIT# is also present this setting will be set to on, if not it will be set to off. If the type.flagNeeded BIT# flag is left out, this setting will remain as it was befor the map was loaded. Instead of deleting one of these flags you can make Homeworld ignore it by typing a ; in front of the flag. The affect of the last six flags is pretty obvious, in the bounty flag write 0 for small bounties, 1 for medium, 2 for large and 3 in order to turn them off. For the starting resources, write 0 for small, 1 for medium and 2 for large. For InjectionsInterval and LumpSumTime, choose a whole number of minutes, multiply this number by 960, and type the result. Notice that the injection properties will only be changed if injections/lump sum is on.<p>

General reminders:<p>

It will matter whether you use capital letters or not, if the game crash while your map is loading, this is a common cause. It is recommented that you copy as much as possible.<p>

Remember not to use any objects in the .missphere files that have been excluded in the .level file.<p>

For a map to support multiple numbers of players you will need to make a map for each number of players that shall be supported. Remember that the mapname in the .level must be the same for all maps in order for them to look like one map, furthermore the name of the folders and the .level files must, exept of the altering playernumber be the same.<p>

Some flags created by MissionMan have been left out, as they do not seem to have a function.